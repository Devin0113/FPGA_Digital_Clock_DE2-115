--//=======================================================
--//  This code is generated by Terasic System Builder
--//=======================================================

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY digital_clock IS
    PORT (
        --//////////// CLOCK //////////
        CLOCK_50 : IN STD_LOGIC;
        CLOCK2_50 : IN STD_LOGIC;
        CLOCK3_50 : IN STD_LOGIC;

        --//////////// LED //////////
        LEDG : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
        LEDR : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);

        --//////////// KEY //////////
        KEY : IN STD_LOGIC_VECTOR (3 DOWNTO 0);

        --//////////// SW //////////
        SW : IN STD_LOGIC_VECTOR (17 DOWNTO 0);

        --//////////// SEG7 //////////
        HEX0 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX1 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX2 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX3 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX4 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX5 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX6 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
        HEX7 : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);

        --//////////// RS232 //////////
        UART_CTS : IN STD_LOGIC;
        UART_RTS : OUT STD_LOGIC;
        UART_RXD : IN STD_LOGIC;
        UART_TXD : OUT STD_LOGIC;

        --//////////// Audio //////////
        AUD_ADCDAT : IN STD_LOGIC;
        AUD_ADCLRCK : INOUT STD_LOGIC;
        AUD_BCLK : INOUT STD_LOGIC;
        AUD_DACDAT : OUT STD_LOGIC;
        AUD_DACLRCK : INOUT STD_LOGIC;
        AUD_XCK : OUT STD_LOGIC;

        --//////////// I2C for Audio  //////////
        I2C_SCLK : OUT STD_LOGIC;
        I2C_SDAT : INOUT STD_LOGIC
    );
END digital_clock;

ARCHITECTURE behav OF digital_clock IS

    --//=======================================================
    --//  REG/WIRE declarations
    --//=======================================================

    --//=======================================================
    --//  Structural coding
    --//=======================================================

    -- 实例化 clkdiv 模块
    COMPONENT clkdiv IS
        PORT (
            clk : IN STD_LOGIC;
            clkms : OUT STD_LOGIC;
            clks : OUT STD_LOGIC
        );
    END COMPONENT;
    -- 实例化 seg 模块
    COMPONENT seg
        PORT (
            data : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
            hex : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
        );
    END COMPONENT;
    -- 实例化 alarm 模块
    COMPONENT alarm
        PORT (
            clk : IN STD_LOGIC;
            alarmsignal : IN STD_LOGIC;
            alarmout : OUT STD_LOGIC_VECTOR (17 DOWNTO 0)
        );
    END COMPONENT;
    -- 实例化 mainfunc 模块
    COMPONENT mainfunc
        PORT (
            clk : IN STD_LOGIC;
            clkms : IN STD_LOGIC;
            clks : IN STD_LOGIC;

            key : IN STD_LOGIC_VECTOR (3 DOWNTO 0);-- 3210，3切换功能，2选位，1正向调时，0负向调时

            data1 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);--时间和闹铃数据输出，秒分时，低位到高位
            data2 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            data3 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            data4 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            data5 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            data6 : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);

            alarm_signal : OUT STD_LOGIC
        );
    END COMPONENT;

    -- 创建连接 clkdiv 模块的信号
    SIGNAL clkms, clks : STD_LOGIC;
    -- 创建连接 seg 模块的信号
    SIGNAL seg_data1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_data2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_data3 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_data4 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_data5 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_data6 : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL seg_hex : STD_LOGIC_VECTOR(6 DOWNTO 0);
    -- 创建连接 alarm 模块的信号
    SIGNAL alarm_signal : STD_LOGIC;
BEGIN

    -- 连接 clkdiv 模块
    clk_div : clkdiv PORT MAP(CLOCK_50, clkms, clks);-- 输入50MHz，输出毫秒，输出秒
    -- 连接 seg 模块
    seg_secl : seg PORT MAP(seg_data1, HEX2);-- 输入显示内容，输入显示位
    seg_sech : seg PORT MAP(seg_data2, HEX3);
    seg_minl : seg PORT MAP(seg_data3, HEX4);
    seg_minh : seg PORT MAP(seg_data4, HEX5);
    seg_hourl : seg PORT MAP(seg_data5, HEX6);
    seg_hourh : seg PORT MAP(seg_data6, HEX7);
	 seg_0 : seg PORT MAP(B"1111", HEX0);
	 seg_1 : seg PORT MAP(B"1111", HEX1);
    -- 连接 alarm 模块
    a_larm : alarm PORT MAP(CLOCK_50, alarm_signal, LEDR);
    -- 连接 mainfunc 模块
    main : mainfunc PORT MAP(CLOCK_50, clkms, clks, KEY, seg_data1, seg_data2, seg_data3, seg_data4, seg_data5, seg_data6, alarm_signal);
    --    -- 初始化每一位为0
    --    seg_data1 <= B"0000";
    --    seg_data2 <= B"0000";
    --    seg_data3 <= B"0000";
    --    seg_data4 <= B"0000";
    --    seg_data5 <= B"0000";
    --    seg_data6 <= B"0000";
	 LEDG(3 downto 0)<=KEY;

END behav;